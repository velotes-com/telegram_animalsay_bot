from dotenv import load_dotenv
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
import os
import logging  # –≤—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,  # –í–º–µ—Å—Ç–æ CallbackContext
)
import cowsay
import nest_asyncio

nest_asyncio.apply()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
COWSAY_CHARACTERS = ['beavis', 'cheese', 'cow', 'daemon', 'dragon', 'fox', 'ghostbusters',
                     'kitty', 'meow', 'miki', 'milk', 'octopus', 'pig', 'stegosaurus',
                     'stimpy', 'trex', 'turkey', 'turtle', 'tux', 'VOVKA']

# –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ VOVKA
VOVKA_IMAGE_URL = "http://velotes.com/images/i_am/I_am_V_02_resize.jpg"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_choices = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: ContextTypes) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /menu, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! "
                                    "–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –≤—ã–±–∏—Ä–∞—Ç—å, –ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ —á–∞—Ç, –±—É–¥–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –∫–æ—Ä–æ–≤–∞!")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é
async def show_menu(update: Update, context: ContextTypes) -> None:
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton

    keyboard = [[InlineKeyboardButton(animal, callback_data=animal)] for animal in COWSAY_CHARACTERS]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
async def button(update: Update, context: ContextTypes) -> None:
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    chosen_animal = query.data

    if chosen_animal == 'VOVKA':
        try:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=VOVKA_IMAGE_URL,
                caption="–í–æ—Ç –≤–∞—à VOVKA! üéâ"
            )
            user_choices[user_id] = 'VOVKA'  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä
            await query.edit_message_text(text="–í—ã –≤—ã–±—Ä–∞–ª–∏ VOVKA! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–æ –æ–Ω –ø–æ–∫–∞–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await query.edit_message_text(text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ VOVKA. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    elif chosen_animal in COWSAY_CHARACTERS:
        user_choices[user_id] = chosen_animal
        await query.edit_message_text(text=f"–¢—ã –≤—ã–±—Ä–∞–ª: {chosen_animal}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def echo(update: Update, context: ContextTypes) -> None:
    user_id = update.message.from_user.id
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
    animal = user_choices.get(user_id, 'cow')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'cow'

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω VOVKA - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–Ω–æ–≤–∞
    if animal == 'VOVKA':
        try:
            await context.bot.send_photo(
                chat_id=update.message.chat_id,
                photo=VOVKA_IMAGE_URL,
                caption="–í–æ—Ç —Å–Ω–æ–≤–∞ –≤–∞—à VOVKA! üéâ"
            )
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è VOVKA: {e}")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ VOVKA üò¢")
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    if hasattr(cowsay, animal):
        cow_message = cowsay.get_output_string(animal, text)
    else:
        cow_message = f"–û—à–∏–±–∫–∞! {animal} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ cowsay."

    escaped_message = escape_markdown(cow_message)
    await update.message.reply_text(f"```\n{escaped_message}\n```", parse_mode="MarkdownV2")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    token = os.getenv("TELEGRAM_TOKEN")

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ Updater
    app = Application.builder().token(token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", show_menu))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

def escape_markdown(text: str) -> str:
    escape_chars = '_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)

if __name__ == '__main__':
    main()
# app.run_polling()  # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞